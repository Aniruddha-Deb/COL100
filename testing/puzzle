	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 10, 15	sdk_version 10, 15, 6
	.globl	_main                   ## -- Begin function main
	.p2align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$0, -4(%rbp)
	movl	$1, -16(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -8(%rbp)
	movl	-16(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	leaq	L_.str(%rip), %rdi
	movb	$0, %al
	callq	_printf
	movl	-8(%rbp), %ecx
	cmpl	-12(%rbp), %ecx
	jge	LBB0_2
## %bb.1:
	movl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)         ## 4-byte Spill
	jmp	LBB0_3
LBB0_2:
	movl	-8(%rbp), %eax
	movl	%eax, -20(%rbp)         ## 4-byte Spill
LBB0_3:
	movl	-20(%rbp), %eax         ## 4-byte Reload
	leaq	L_.str.1(%rip), %rdi
	movl	%eax, %esi
	movb	$0, %al
	callq	_printf
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	leaq	L_.str(%rip), %rdi
	movl	%eax, -24(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	movl	-8(%rbp), %ecx
	cmpl	-12(%rbp), %ecx
	jge	LBB0_5
## %bb.4:
	movl	-8(%rbp), %eax
	movl	%eax, %ecx
	addl	$1, %ecx
	movl	%ecx, -8(%rbp)
	movl	%eax, -28(%rbp)         ## 4-byte Spill
	jmp	LBB0_6
LBB0_5:
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$1, %ecx
	movl	%ecx, -12(%rbp)
	movl	%eax, -28(%rbp)         ## 4-byte Spill
LBB0_6:
	movl	-28(%rbp), %eax         ## 4-byte Reload
	leaq	L_.str.2(%rip), %rdi
	movl	%eax, %esi
	movb	$0, %al
	callq	_printf
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	leaq	L_.str(%rip), %rdi
	movl	%eax, -32(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	movl	-8(%rbp), %ecx
	cmpl	-12(%rbp), %ecx
	jge	LBB0_8
## %bb.7:
	movl	-8(%rbp), %eax
	movl	%eax, %ecx
	addl	$1, %ecx
	movl	%ecx, -8(%rbp)
	movl	%eax, -36(%rbp)         ## 4-byte Spill
	jmp	LBB0_9
LBB0_8:
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$1, %ecx
	movl	%ecx, -12(%rbp)
	movl	%eax, -36(%rbp)         ## 4-byte Spill
LBB0_9:
	movl	-36(%rbp), %eax         ## 4-byte Reload
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	leaq	L_.str.3(%rip), %rdi
	movl	%eax, %esi
	movb	$0, %al
	callq	_printf
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	leaq	L_.str(%rip), %rdi
	movl	%eax, -40(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	xorl	%ecx, %ecx
	movl	$3, -8(%rbp)
	movl	$4, -16(%rbp)
	movl	$4, -12(%rbp)
	movl	-16(%rbp), %edx
	cmpl	-12(%rbp), %edx
	setge	%r8b
	andb	$1, %r8b
	movzbl	%r8b, %edx
	movl	-8(%rbp), %esi
	cmpl	%esi, %edx
	movl	$1, %edx
	cmovgel	%edx, %ecx
	leaq	L_.str.4(%rip), %rdi
	movl	%ecx, %esi
	movl	%eax, -44(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	leaq	L_.str.5(%rip), %rdi
	movl	%eax, -48(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	xorl	%ecx, %ecx
                                        ## kill: def $cl killed $cl killed $ecx
	movl	-16(%rbp), %edx
	cmpl	-8(%rbp), %edx
	movb	%cl, -49(%rbp)          ## 1-byte Spill
	jl	LBB0_11
## %bb.10:
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	setge	%cl
	movb	%cl, -49(%rbp)          ## 1-byte Spill
LBB0_11:
	movb	-49(%rbp), %al          ## 1-byte Reload
	andb	$1, %al
	movzbl	%al, %esi
	leaq	L_.str.6(%rip), %rdi
	movb	$0, %al
	callq	_printf
	xorl	%ecx, %ecx
	movl	%eax, -56(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"x=%d, y=%d, z=%d\n\n"

L_.str.1:                               ## @.str.1
	.asciz	"(x<y)?y:x = %d\n"

L_.str.2:                               ## @.str.2
	.asciz	"x<y?x++:y++ = %d\n"

L_.str.3:                               ## @.str.3
	.asciz	"z+=x<y?x++:y++ = %d\n"

L_.str.4:                               ## @.str.4
	.asciz	"z >= y >= x ? 1 : 0 = %d\n"

L_.str.5:                               ## @.str.5
	.asciz	"x=%d, y=%d, z=%d\n"

L_.str.6:                               ## @.str.6
	.asciz	"z >= x && y >= x = %d\n"

.subsections_via_symbols
